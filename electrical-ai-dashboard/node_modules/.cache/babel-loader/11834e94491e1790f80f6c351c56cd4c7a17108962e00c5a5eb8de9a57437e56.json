{"ast":null,"code":"var _jsxFileName = \"/Users/tylern-w/Desktop/electrical_ai_app/electrical-ai-dashboard/src/components/ChatInterface.tsx\",\n  _s = $RefreshSig$();\n// src/components/ChatInterface.tsx\nimport React, { useState, useRef } from 'react';\nimport { useAppSelector, useAppDispatch } from '../app/hooks';\nimport { addMessage, updateLastMessage } from '../features/chat/chatSlice';\nimport { Box, Button, TextField, Paper, Typography, Avatar, Stack } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport ElectricBoltIcon from '@mui/icons-material/ElectricBolt';\nimport TypingIndicator from './TypingIndicator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  // Retrieve the conversation from Redux.\n  const conversation = useAppSelector(state => state.chat.conversation);\n  const dispatch = useAppDispatch();\n\n  // Local state for the user's input and whether streaming is active.\n  const [input, setInput] = useState('');\n  const [streaming, setStreaming] = useState(false);\n\n  // Use a ref to accumulate the live answer tokens across renders.\n  const liveAnswerRef = useRef(\"\");\n\n  // Voice input using the Web Speech API.\n  const startVoiceInput = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Your browser does not support speech recognition.\");\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.start();\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setInput(transcript);\n    };\n  };\n\n  // Voice output using the Web Speech API.\n  const speakText = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n\n  // When sending a new query, ensure that we only have one assistant message.\n  const handleSend = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Dispatch the user's message.\n    dispatch(addMessage({\n      role: 'user',\n      content: input\n    }));\n\n    // Check if the last message is an assistant message that is empty.\n    const lastMsg = conversation.length > 0 ? conversation[conversation.length - 1] : null;\n    if (!(lastMsg && lastMsg.role === 'assistant' && lastMsg.content.trim() === \"\")) {\n      // If not, dispatch a single empty assistant message.\n      dispatch(addMessage({\n        role: 'assistant',\n        content: \"\"\n      }));\n    }\n    setStreaming(true);\n    liveAnswerRef.current = \"\"; // Reset the accumulator.\n\n    console.log(\"Opening SSE connection for query:\", input);\n    // Use the streaming endpoint only.\n    const eventSource = new EventSource(`http://localhost:8000/query/stream?query=${encodeURIComponent(input)}`);\n    eventSource.onopen = () => {\n      console.log(\"SSE connection opened.\");\n    };\n    eventSource.onmessage = event => {\n      console.log(\"Received SSE data:\", event.data);\n      if (event.data.trim() === \"[DONE]\") {\n        eventSource.close();\n        setStreaming(false);\n        // Do not clear liveAnswerRef.currentâ€”this is our final answer.\n      } else {\n        // Append the incoming token plus a space.\n        liveAnswerRef.current += event.data + \" \";\n        // Update the last assistant message in Redux with the accumulated answer.\n        dispatch(updateLastMessage(liveAnswerRef.current));\n      }\n    };\n    eventSource.onerror = err => {\n      console.error(\"SSE error:\", err);\n      eventSource.close();\n      setStreaming(false);\n    };\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"Chat with Electrical AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 2,\n        mb: 2,\n        maxHeight: 400,\n        overflowY: 'auto'\n      },\n      children: [conversation.map((msg, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          y: 10\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        transition: {\n          duration: 0.3\n        },\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          spacing: 1,\n          alignItems: \"flex-start\",\n          sx: {\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              bgcolor: msg.role === 'user' ? 'primary.main' : 'secondary.main'\n            },\n            children: msg.role === 'user' ? /*#__PURE__*/_jsxDEV(AccountCircleIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 40\n            }, this) : /*#__PURE__*/_jsxDEV(ElectricBoltIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 64\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 1.5,\n              backgroundColor: msg.role === 'user' ? '#dcf8c6' : '#f1f0f0',\n              borderRadius: 2,\n              boxShadow: 1,\n              maxWidth: '80%'\n            },\n            children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)), streaming && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          y: 10\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        transition: {\n          duration: 0.3\n        },\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"row\",\n          spacing: 1,\n          alignItems: \"flex-start\",\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            sx: {\n              bgcolor: 'secondary.main'\n            },\n            children: /*#__PURE__*/_jsxDEV(ElectricBoltIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 1.5,\n              backgroundColor: '#f1f0f0',\n              borderRadius: 2,\n              boxShadow: 1,\n              maxWidth: '80%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n              children: liveAnswerRef.current\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TypingIndicator, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      onSubmit: handleSend,\n      sx: {\n        display: 'flex',\n        gap: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        variant: \"outlined\",\n        placeholder: \"Type your message...\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        disabled: streaming,\n        children: streaming ? 'Streaming...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: () => startVoiceInput(),\n        children: \"\\uD83C\\uDFA4 Voice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"Qdd6PyhsiexjZzAjtYb0O0nzt/E=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useAppSelector","useAppDispatch","addMessage","updateLastMessage","Box","Button","TextField","Paper","Typography","Avatar","Stack","motion","ReactMarkdown","AccountCircleIcon","ElectricBoltIcon","TypingIndicator","jsxDEV","_jsxDEV","ChatInterface","_s","conversation","state","chat","dispatch","input","setInput","streaming","setStreaming","liveAnswerRef","startVoiceInput","SpeechRecognition","window","webkitSpeechRecognition","alert","recognition","lang","start","onresult","event","transcript","results","speakText","text","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","handleSend","e","preventDefault","trim","role","content","lastMsg","length","current","console","log","eventSource","EventSource","encodeURIComponent","onopen","onmessage","data","close","onerror","err","error","sx","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","p","mb","maxHeight","overflowY","map","msg","index","div","initial","opacity","y","animate","transition","duration","direction","spacing","alignItems","bgcolor","backgroundColor","borderRadius","boxShadow","maxWidth","component","onSubmit","display","gap","fullWidth","placeholder","value","onChange","target","type","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/tylern-w/Desktop/electrical_ai_app/electrical-ai-dashboard/src/components/ChatInterface.tsx"],"sourcesContent":["// src/components/ChatInterface.tsx\nimport React, { useState, useRef } from 'react';\nimport { useAppSelector, useAppDispatch } from '../app/hooks';\nimport { addMessage, updateLastMessage, ChatMessage } from '../features/chat/chatSlice';\nimport { Box, Button, TextField, Paper, Typography, Avatar, Stack } from '@mui/material';\nimport { motion } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport ElectricBoltIcon from '@mui/icons-material/ElectricBolt';\nimport TypingIndicator from './TypingIndicator';\n\nconst ChatInterface: React.FC = () => {\n  // Retrieve the conversation from Redux.\n  const conversation = useAppSelector((state) => state.chat.conversation);\n  const dispatch = useAppDispatch();\n\n  // Local state for the user's input and whether streaming is active.\n  const [input, setInput] = useState<string>('');\n  const [streaming, setStreaming] = useState<boolean>(false);\n\n  // Use a ref to accumulate the live answer tokens across renders.\n  const liveAnswerRef = useRef<string>(\"\");\n\n  // Voice input using the Web Speech API.\n  const startVoiceInput = () => {\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Your browser does not support speech recognition.\");\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.start();\n    recognition.onresult = (event: any) => {\n      const transcript = event.results[0][0].transcript;\n      setInput(transcript);\n    };\n  };\n\n  // Voice output using the Web Speech API.\n  const speakText = (text: string) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    window.speechSynthesis.speak(utterance);\n  };\n\n  // When sending a new query, ensure that we only have one assistant message.\n  const handleSend = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    // Dispatch the user's message.\n    dispatch(addMessage({ role: 'user', content: input }));\n    \n    // Check if the last message is an assistant message that is empty.\n    const lastMsg = conversation.length > 0 ? conversation[conversation.length - 1] : null;\n    if (!(lastMsg && lastMsg.role === 'assistant' && lastMsg.content.trim() === \"\")) {\n      // If not, dispatch a single empty assistant message.\n      dispatch(addMessage({ role: 'assistant', content: \"\" }));\n    }\n    \n    setStreaming(true);\n    liveAnswerRef.current = \"\"; // Reset the accumulator.\n\n    console.log(\"Opening SSE connection for query:\", input);\n    // Use the streaming endpoint only.\n    const eventSource = new EventSource(`http://localhost:8000/query/stream?query=${encodeURIComponent(input)}`);\n\n    eventSource.onopen = () => {\n      console.log(\"SSE connection opened.\");\n    };\n\n    eventSource.onmessage = (event) => {\n      console.log(\"Received SSE data:\", event.data);\n      if (event.data.trim() === \"[DONE]\") {\n        eventSource.close();\n        setStreaming(false);\n        // Do not clear liveAnswerRef.currentâ€”this is our final answer.\n      } else {\n        // Append the incoming token plus a space.\n        liveAnswerRef.current += event.data + \" \";\n        // Update the last assistant message in Redux with the accumulated answer.\n        dispatch(updateLastMessage(liveAnswerRef.current));\n      }\n    };\n\n    eventSource.onerror = (err) => {\n      console.error(\"SSE error:\", err);\n      eventSource.close();\n      setStreaming(false);\n    };\n\n    setInput('');\n  };\n\n  return (\n    <Box sx={{ mt: 4 }}>\n      <Typography variant=\"h5\" gutterBottom>Chat with Electrical AI</Typography>\n      <Paper sx={{ p: 2, mb: 2, maxHeight: 400, overflowY: 'auto' }}>\n        {conversation.map((msg: ChatMessage, index: number) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Stack direction=\"row\" spacing={1} alignItems=\"flex-start\" sx={{ mb: 1 }}>\n              <Avatar sx={{ bgcolor: msg.role === 'user' ? 'primary.main' : 'secondary.main' }}>\n                {msg.role === 'user' ? <AccountCircleIcon /> : <ElectricBoltIcon />}\n              </Avatar>\n              <Box\n                sx={{\n                  p: 1.5,\n                  backgroundColor: msg.role === 'user' ? '#dcf8c6' : '#f1f0f0',\n                  borderRadius: 2,\n                  boxShadow: 1,\n                  maxWidth: '80%',\n                }}\n              >\n                <ReactMarkdown>{msg.content}</ReactMarkdown>\n              </Box>\n            </Stack>\n          </motion.div>\n        ))}\n        {streaming && (\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Stack direction=\"row\" spacing={1} alignItems=\"flex-start\">\n              <Avatar sx={{ bgcolor: 'secondary.main' }}>\n                <ElectricBoltIcon />\n              </Avatar>\n              <Box\n                sx={{\n                  p: 1.5,\n                  backgroundColor: '#f1f0f0',\n                  borderRadius: 2,\n                  boxShadow: 1,\n                  maxWidth: '80%',\n                }}\n              >\n                <ReactMarkdown>{liveAnswerRef.current}</ReactMarkdown>\n                <TypingIndicator />\n              </Box>\n            </Stack>\n          </motion.div>\n        )}\n      </Paper>\n      <Box component=\"form\" onSubmit={handleSend} sx={{ display: 'flex', gap: 1 }}>\n        <TextField\n          fullWidth\n          variant=\"outlined\"\n          placeholder=\"Type your message...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n        />\n        <Button type=\"submit\" variant=\"contained\" disabled={streaming}>\n          {streaming ? 'Streaming...' : 'Send'}\n        </Button>\n        <Button variant=\"outlined\" onClick={() => startVoiceInput()}>\n          ðŸŽ¤ Voice\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}