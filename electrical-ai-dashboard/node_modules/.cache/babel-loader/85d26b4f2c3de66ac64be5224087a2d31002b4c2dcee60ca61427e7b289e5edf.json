{"ast":null,"code":"// src/features/chat/chatSlice.ts\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  conversation: []\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    addMessage(state, action) {\n      state.conversation.push(action.payload);\n    },\n    updateLastMessage(state, action) {\n      if (state.conversation.length > 0) {\n        const lastMsg = state.conversation[state.conversation.length - 1];\n        if (lastMsg.role === 'assistant') {\n          lastMsg.content = action.payload;\n        }\n      }\n    },\n    setConversation(state, action) {\n      state.conversation = action.payload;\n    },\n    clearConversation(state) {\n      state.conversation = [];\n    }\n  }\n});\nexport const {\n  addMessage,\n  updateLastMessage,\n  setConversation,\n  clearConversation\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","conversation","chatSlice","name","reducers","addMessage","state","action","push","payload","updateLastMessage","length","lastMsg","role","content","setConversation","clearConversation","actions","reducer"],"sources":["/Users/tylern-w/Desktop/electrical_ai_app/electrical-ai-dashboard/src/features/chat/chatSlice.ts"],"sourcesContent":["// src/features/chat/chatSlice.ts\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport interface ChatState {\n  conversation: ChatMessage[];\n}\n\nconst initialState: ChatState = {\n  conversation: [],\n};\n\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    addMessage(state, action: PayloadAction<ChatMessage>) {\n      state.conversation.push(action.payload);\n    },\n    updateLastMessage(state, action: PayloadAction<string>) {\n      if (state.conversation.length > 0) {\n        const lastMsg = state.conversation[state.conversation.length - 1];\n        if (lastMsg.role === 'assistant') {\n          lastMsg.content = action.payload;\n        }\n      }\n    },\n    setConversation(state, action: PayloadAction<ChatMessage[]>) {\n      state.conversation = action.payload;\n    },\n    clearConversation(state) {\n      state.conversation = [];\n    },\n  },\n});\n\nexport const { addMessage, updateLastMessage, setConversation, clearConversation } = chatSlice.actions;\nexport default chatSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAW7D,MAAMC,YAAuB,GAAG;EAC9BC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRC,UAAUA,CAACC,KAAK,EAAEC,MAAkC,EAAE;MACpDD,KAAK,CAACL,YAAY,CAACO,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACzC,CAAC;IACDC,iBAAiBA,CAACJ,KAAK,EAAEC,MAA6B,EAAE;MACtD,IAAID,KAAK,CAACL,YAAY,CAACU,MAAM,GAAG,CAAC,EAAE;QACjC,MAAMC,OAAO,GAAGN,KAAK,CAACL,YAAY,CAACK,KAAK,CAACL,YAAY,CAACU,MAAM,GAAG,CAAC,CAAC;QACjE,IAAIC,OAAO,CAACC,IAAI,KAAK,WAAW,EAAE;UAChCD,OAAO,CAACE,OAAO,GAAGP,MAAM,CAACE,OAAO;QAClC;MACF;IACF,CAAC;IACDM,eAAeA,CAACT,KAAK,EAAEC,MAAoC,EAAE;MAC3DD,KAAK,CAACL,YAAY,GAAGM,MAAM,CAACE,OAAO;IACrC,CAAC;IACDO,iBAAiBA,CAACV,KAAK,EAAE;MACvBA,KAAK,CAACL,YAAY,GAAG,EAAE;IACzB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,UAAU;EAAEK,iBAAiB;EAAEK,eAAe;EAAEC;AAAkB,CAAC,GAAGd,SAAS,CAACe,OAAO;AACtG,eAAef,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}