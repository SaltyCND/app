{"ast":null,"code":"var _jsxFileName = \"/Users/tylern-w/Desktop/electrical_ai_app/electrical-ai-dashboard/src/ThemeProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useMemo, useState } from 'react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ColorModeContext = /*#__PURE__*/createContext({\n  toggleColorMode: () => {}\n});\nconst CustomThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [mode, setMode] = useState('light');\n  const colorMode = useMemo(() => ({\n    toggleColorMode: () => {\n      setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n    }\n  }), []);\n  const theme = useMemo(() => createTheme({\n    palette: {\n      mode,\n      primary: {\n        main: '#1976d2'\n      },\n      secondary: {\n        main: '#dc004e'\n      },\n      background: {\n        default: mode === 'light' ? '#f5f5f5' : '#121212'\n      }\n    },\n    typography: {\n      fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n      h5: {\n        fontWeight: 600\n      },\n      body1: {\n        fontSize: '1rem'\n      }\n    },\n    components: {\n      MuiButton: {\n        styleOverrides: {\n          root: {\n            textTransform: 'none'\n          }\n        }\n      }\n    }\n  }), [mode]);\n  return /*#__PURE__*/_jsxDEV(ColorModeContext.Provider, {\n    value: colorMode,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomThemeProvider, \"d4Wg7a/ehJsJwQbDoYd9huIJFWY=\");\n_c = CustomThemeProvider;\nexport default CustomThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"CustomThemeProvider\");","map":{"version":3,"names":["React","createContext","useMemo","useState","ThemeProvider","createTheme","CssBaseline","jsxDEV","_jsxDEV","ColorModeContext","toggleColorMode","CustomThemeProvider","children","_s","mode","setMode","colorMode","prevMode","theme","palette","primary","main","secondary","background","default","typography","fontFamily","h5","fontWeight","body1","fontSize","components","MuiButton","styleOverrides","root","textTransform","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tylern-w/Desktop/electrical_ai_app/electrical-ai-dashboard/src/ThemeProvider.tsx"],"sourcesContent":["import React, { createContext, useMemo, useState } from 'react';\nimport { ThemeProvider, createTheme, PaletteMode } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nexport const ColorModeContext = createContext({ toggleColorMode: () => {} });\n\nconst CustomThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [mode, setMode] = useState<PaletteMode>('light');\n\n  const colorMode = useMemo(() => ({\n    toggleColorMode: () => {\n      setMode((prevMode: PaletteMode) => (prevMode === 'light' ? 'dark' : 'light'));\n    },\n  }), []);\n\n  const theme = useMemo(() =>\n    createTheme({\n      palette: {\n        mode,\n        primary: { main: '#1976d2' },\n        secondary: { main: '#dc004e' },\n        background: { default: mode === 'light' ? '#f5f5f5' : '#121212' },\n      },\n      typography: {\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        h5: { fontWeight: 600 },\n        body1: { fontSize: '1rem' },\n      },\n      components: {\n        MuiButton: {\n          styleOverrides: {\n            root: { textTransform: 'none' },\n          },\n        },\n      },\n    }), [mode]);\n\n  return (\n    <ColorModeContext.Provider value={colorMode}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </ThemeProvider>\n    </ColorModeContext.Provider>\n  );\n};\n\nexport default CustomThemeProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAC/D,SAASC,aAAa,EAAEC,WAAW,QAAqB,sBAAsB;AAC9E,OAAOC,WAAW,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,OAAO,MAAMC,gBAAgB,gBAAGR,aAAa,CAAC;EAAES,eAAe,EAAEA,CAAA,KAAM,CAAC;AAAE,CAAC,CAAC;AAE5E,MAAMC,mBAA4D,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAc,OAAO,CAAC;EAEtD,MAAMa,SAAS,GAAGd,OAAO,CAAC,OAAO;IAC/BQ,eAAe,EAAEA,CAAA,KAAM;MACrBK,OAAO,CAAEE,QAAqB,IAAMA,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;IAC/E;EACF,CAAC,CAAC,EAAE,EAAE,CAAC;EAEP,MAAMC,KAAK,GAAGhB,OAAO,CAAC,MACpBG,WAAW,CAAC;IACVc,OAAO,EAAE;MACPL,IAAI;MACJM,OAAO,EAAE;QAAEC,IAAI,EAAE;MAAU,CAAC;MAC5BC,SAAS,EAAE;QAAED,IAAI,EAAE;MAAU,CAAC;MAC9BE,UAAU,EAAE;QAAEC,OAAO,EAAEV,IAAI,KAAK,OAAO,GAAG,SAAS,GAAG;MAAU;IAClE,CAAC;IACDW,UAAU,EAAE;MACVC,UAAU,EAAE,4CAA4C;MACxDC,EAAE,EAAE;QAAEC,UAAU,EAAE;MAAI,CAAC;MACvBC,KAAK,EAAE;QAAEC,QAAQ,EAAE;MAAO;IAC5B,CAAC;IACDC,UAAU,EAAE;MACVC,SAAS,EAAE;QACTC,cAAc,EAAE;UACdC,IAAI,EAAE;YAAEC,aAAa,EAAE;UAAO;QAChC;MACF;IACF;EACF,CAAC,CAAC,EAAE,CAACrB,IAAI,CAAC,CAAC;EAEb,oBACEN,OAAA,CAACC,gBAAgB,CAAC2B,QAAQ;IAACC,KAAK,EAAErB,SAAU;IAAAJ,QAAA,eAC1CJ,OAAA,CAACJ,aAAa;MAACc,KAAK,EAAEA,KAAM;MAAAN,QAAA,gBAC1BJ,OAAA,CAACF,WAAW;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACd7B,QAAQ;IAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEhC,CAAC;AAAC5B,EAAA,CAvCIF,mBAA4D;AAAA+B,EAAA,GAA5D/B,mBAA4D;AAyClE,eAAeA,mBAAmB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}